generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  // nao mexer >
  id            String    @id @default(uuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean?
  image         String?
  role          Role      @default(USER)
  // < nao mexer 

  createdAt  DateTime
  updatedAt  DateTime
  sessions   Session[]
  accounts   Account[]

  @@map("user")
}

model Curso {
  id        String @id @default(uuid()) @map("_id")
  name      String
  descricao String
  slug      String @unique

  materiasRelacionadas CursoMateriaRelacionada[]
}

model CursoMateriaRelacionada {
  id String @id @default(uuid()) @map("_id")

  curso   Curso  @relation(fields: [cursoId], references: [id])
  cursoId String

  materia   Materia @relation(fields: [materiaId], references: [id])
  materiaId String

  @@unique([cursoId, materiaId])
}

model Materia {
  id                 String                    @id @default(uuid()) @map("_id")
  name               String
  descricao          String
  cor                String
  slug               String                    @unique
  cursosRelacionados CursoMateriaRelacionada[]
}

model Licao {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  descricao String
  archived  Boolean? @default(false)

  conteudo     Conteudo[]
}

model Conteudo {
  id       String   @id @default(uuid()) @map("_id")
  name     String
  type     String
  markdown String
  order    Int      @default(0)
  archived Boolean? @default(false)

  licao   Licao?  @relation(fields: [licaoId], references: [id])
  licaoId String?
}

// evitar mexer daqui pra baixo:
model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
